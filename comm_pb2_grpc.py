# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import comm_pb2 as comm__pb2


class MapperServiceStub(object):
    """Service definition for the Mapper
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendInput = channel.unary_unary(
                '/comm.MapperService/SendInput',
                request_serializer=comm__pb2.MapperInput.SerializeToString,
                response_deserializer=comm__pb2.MapperResponse.FromString,
                )
        self.GetPartitionedData = channel.unary_unary(
                '/comm.MapperService/GetPartitionedData',
                request_serializer=comm__pb2.GetPartitionedDataRequest.SerializeToString,
                response_deserializer=comm__pb2.PartitionResponse.FromString,
                )


class MapperServiceServicer(object):
    """Service definition for the Mapper
    """

    def SendInput(self, request, context):
        """Sends input data to the mapper for processing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPartitionedData(self, request, context):
        """Retrieves processed data from the mapper for the reducer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MapperServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendInput': grpc.unary_unary_rpc_method_handler(
                    servicer.SendInput,
                    request_deserializer=comm__pb2.MapperInput.FromString,
                    response_serializer=comm__pb2.MapperResponse.SerializeToString,
            ),
            'GetPartitionedData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPartitionedData,
                    request_deserializer=comm__pb2.GetPartitionedDataRequest.FromString,
                    response_serializer=comm__pb2.PartitionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'comm.MapperService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MapperService(object):
    """Service definition for the Mapper
    """

    @staticmethod
    def SendInput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comm.MapperService/SendInput',
            comm__pb2.MapperInput.SerializeToString,
            comm__pb2.MapperResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPartitionedData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comm.MapperService/GetPartitionedData',
            comm__pb2.GetPartitionedDataRequest.SerializeToString,
            comm__pb2.PartitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ReducerServiceStub(object):
    """REDUCER

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessReduce = channel.unary_unary(
                '/comm.ReducerService/ProcessReduce',
                request_serializer=comm__pb2.ReducerInput.SerializeToString,
                response_deserializer=comm__pb2.ReducerResponse.FromString,
                )


class ReducerServiceServicer(object):
    """REDUCER

    """

    def ProcessReduce(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReducerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessReduce': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessReduce,
                    request_deserializer=comm__pb2.ReducerInput.FromString,
                    response_serializer=comm__pb2.ReducerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'comm.ReducerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReducerService(object):
    """REDUCER

    """

    @staticmethod
    def ProcessReduce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comm.ReducerService/ProcessReduce',
            comm__pb2.ReducerInput.SerializeToString,
            comm__pb2.ReducerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
